/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.editor;

import com.editor.item.ItemDefDump;
import com.editor.item.ItemSelection;
import com.editor.item.MultiItemPacker;
import com.editor.model.MultiModelPacker;
import com.editor.model.UniModelDumper;
import java.awt.EventQueue;

import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;

/**
 *
 * @author Travis
 */
public class ToolSelection extends javax.swing.JFrame {

    /**
     * Creates new form ToolSelection
     */
    public ToolSelection() {
        setTitle("Tool Selection");
        setResizable(false);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        initComponents();
        Main.log("Main", "ToolSelection Started");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        jLabel1 = new JLabel();
        selectionBox = new JComboBox();
        submitButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        loadCacheButton = new javax.swing.JMenuItem();
        exitButton = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Select Your Editor:");

        selectionBox.setModel(new DefaultComboBoxModel(new String[]{"Items", "NPCs", "ItemDefDump",
            "NPCDefDump", "MultiModelPacker", "MultiItemPacker", "MultiNPCPacker", "UniModelDumper"}));

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        loadCacheButton.setText("Load Cache");
        loadCacheButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(loadCacheButton);

        exitButton.setText("Exit Program");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        jMenu1.add(exitButton);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(submitButton)
                .addComponent(selectionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(62, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(58, 58, 58)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(submitButton)
                .addGap(38, 38, 38)));

        pack();
    }

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        if (selectionBox.getSelectedIndex() == 0) {
            try {
                new ItemSelection(cache).setVisible(true);
                Main.log("ToolSelection", "ItemSelection Started");
            } catch (IOException e) {
                Main.log("ToolSelection", "No Cache Set!");
            }
        } else if (selectionBox.getSelectedIndex() == 1) {
            //new NPCSelection(cache).setVisible(true);
            Main.log("ToolSelection", "NPCSelection Started");
        } else if (selectionBox.getSelectedIndex() == 2) {
            Main.log("ToolSelection", "Item Def Dumping Started");
            EventQueue.invokeLater(new Runnable() {
                public void run() {
                    ItemDefDump.editorDump(cache);
                }
            });
        } else if (selectionBox.getSelectedIndex() == 3) {
            Main.log("ToolSelection", "NPC Def Dumping Started");
            EventQueue.invokeLater(new Runnable() {
                public void run() {

                    //NPCDefDump.editorDump(cache);
                }
            });
        } else if (selectionBox.getSelectedIndex() == 4) {
            Main.log("ToolSelection", "MultiModelPacker Started");
            EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new MultiModelPacker(cache);
                }
            });
        } else if (selectionBox.getSelectedIndex() == 5) {
           // Main.log("ToolSelection", "MultiItemPacker Started");
            Main.log("ToolSelection", "MultiItemPacker is not working at the moment.");
            /*EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new MultiItemPacker(cache);
                }
            });*/
        } else if (selectionBox.getSelectedIndex() == 6) {
           // Main.log("ToolSelection", "MultiItemPacker Started");
            Main.log("ToolSelection", "MultiNPCPacker is not working at the moment.");
            /*EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new MultiItemPacker(cache);
                }
            });*/
        } else if (selectionBox.getSelectedIndex() == 7) {
            Main.log("ToolSelection", "UniModelDumper Started");
            EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new UniModelDumper(cache);
                }
            });
        } else {
            Main.log("ToolSelection", "No Tool Selected!");
        }
    }

    private void jMenuItem1ActionPerformed(ActionEvent evt) {
        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (evt.getSource() == loadCacheButton) {
            int returnVal = fc.showOpenDialog(ToolSelection.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                cache = file.getPath() + "/";
            }
        }
    }

    private void exitButtonActionPerformed(ActionEvent evt) {
        JDialog.setDefaultLookAndFeelDecorated(true);
        int response = JOptionPane.showConfirmDialog(null, "Do you want to continue?", "Confirm",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ToolSelection().setVisible(true);
            }
        });
    }
    private String cache;
    private JLabel jLabel1;
    private JMenu jMenu1;
    private JMenuBar jMenuBar1;
    private JMenuItem loadCacheButton;
    private JMenuItem exitButton;
    private JComboBox selectionBox;
    private JButton submitButton;
}
